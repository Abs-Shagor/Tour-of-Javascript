
0. What is asynchronous operation or call?
------------------------------------------------------------------------------------------
An asynchronous call is a non-blocking operation that allows code to run in the background 
while the rest of the program continues executing. ex. fetch, setTimeOut, setInterval are async. call or op.


1. Tell me something about JS engine v8 internal mechanism.
------------------------------------------------------------------------------------------
V8 is Google's open-source high performance Javascript engine, which is written in c++. 
basically, this V8 engine run the Javascript code.


2. Can you explain what the .then() method does? 
------------------------------------------------------------------------------------------
Run this when the Promise settles (resolves/rejects), and pass the result forward.



3. Difference between setTimeOut and setInterval?
------------------------------------------------------------------------------------------
setTimeOut mean do something after x seconds.
setInterval mean do something in every x seconds until we force to stop it.


4. Can you explain the difference between an async/await and promise?
------------------------------------------------------------------------------------------
Promise: Uses .then(), .catch() chains and for error handling it's also use the both.
async/await: try/catch to write code and handling error.


5. What's the error handling strategy for promises that were rejected while awaiting?
------------------------------------------------------------------------------------------
Use try/catch with await or chain .catch() to handle rejected Promises. 


6. Write a function that take two parameters, name and delay time. you task is to print the name after the delay time.
------------------------------------------------------------------------------------------
function fun(name, time) {
    setTimeout(() => {
       console.log(name); 
    }, time);
}
fun('shagor', 3000);

7. make a function that print 'Hello Abs Shagor' messege every 2 seconds and after 12 seconds, it will stops.
------------------------------------------------------------------------------------------
function fun() {
  let count = 0;
  const intervalId = setInterval(() => {
    console.log('Hello Abs Shagor');
    count++;
    if (count >= 6) { // 12s / 2s = 6 iterations
      clearInterval(intervalId);
    }
  }, 2000); // 2 seconds
}
fun();


8. write an async/await function that fetch data from an api and logs the fetch data.
------------------------------------------------------------------------------------------
async function fetchDataAndGreet() {
  try {
    const response = await fetch('https://jsonplaceholder.typicode.com/todos/1');
    const data = await response.json();
    console.log(data); //  log fetched data
  } catch (error) {
    console.error('Error:', error); // Handle errors
  }
}
fetchDataAndGreet();


9. What is event loop in Javascript? 
   If Javascript is single threaded, how does it handle asynchronous call?
------------------------------------------------------------------------------------------
Single threaded: mean it has one call stack and executes one operation at a time in sequence.
Eevent Loop: is a mechanism which handle asynchronous operation in a single threaded environment.

call-stack: This is the place of v8 engine where the js code execute.
callback-queue: This is the place where task are waiting for execution according to their priority.

Let's take the below code:

function fun() {
  console.log('Hello this is me. function:);
}

console.log(1)                    //line-1
setTimeout(() => {                //line-2
    console.log('Hello Shagor');  
}, 3000);                         
console.log(2);                   //line-3
fun();                            //line-4
console.log(3)                    //line-5
setTimeout(() => {                //line-6
    console.log('Hi. Joy');
}, 2000);
console.log(4)                    //line-7

Here, we know that javascript execute is single threaded , mean it's take one operation
and execute it then take another.......
But, it can handle asynchronous operation by the help of Eevent loop. 

in the above code the line 1,3,4,5,7 go to call-stack and execute one by one . on the other
hand the line 2 , 6 go into the callback-queue . in this queue the line will rearranged 
according to their priority. In our code the line-6 will come before line-2 although the line 2
come before line-6. bcz of it's waiting time. after that the line move from callback-queue to
call-stack and execute one by one. This is how the Eevent-loop work.






/// Summary of JavaScript Learning

1. variable declaration using: var, let, const 
2. conditions: >, <, <=, >=, ==, ===, !==, &&, ||, if else
3. Loop: for,  for of, for in, while, do while
4. array: const nums = [2, 1, 4]	
5. Object: const obj = {name: ‘shagor’, age: 26, marks: [85, 90,92,75] }; 
6. function: function fun(....) {.....}

Some stuff from ES6
    Const name = ‘shagor’, age = 26;
7. Template string:  const str = `My name is  ${name} and I am ${age} years old  `
8. Arrow function: const sum = (a, b) => a+b;	const sum = (a, b) => { return a+b }
9. Spread operator: const nums = [2,1,3]	   (Q. make a copy of nums and add 77 to the new array).
			const nums2 = [...nums, 77]
10. map, forEach, filter, find of Array
11. Array/ object destructuring: (destructing mean assign name to elements of the array or object).
const nums = [2, 1, 3]	
const [x, y, z] = [2, 1, 3]
Note: for array serial is matter, thats means 2 assign to x, 1 assign to y and 3 will assign to z.
But for object serial is not matter.
	const student= {
		name: ‘shagor’,
		age: 26,
		height: 5.6,
		marks: [80, 92, 77, 98]
	}
const {name, marks} = student;
Here, the shagor will assign to name and the array will assign to marks automatically.

12. JSON: JSON.stringify(...),	JSON.parse(...)
13. fetch: fetch(‘url’).then(response => response.JSON()).then(data => {....})
14. Keys and values: we can find all the keys and values of object by simple tricks
	const all_keys = Object.keys(student)
	const all_values = Object.values(student)
15. for of: use for array
16. for in: use for object
17. Truthy: ‘xyz’, -x, +x, true, [...], {...}
18. Falsy: ‘’, 0, false, null, undefined
19. Ternary operator: (name===’shagor’) ? console.log(‘Yes’) : console.log(‘No’)
20. Local storage and session storage: localStorage.setItem(key, value)   localStorage.getItem(key)